Sprint 1:
Entregar o desenho de uma pista, a ser criada pelo grupo, de acordo com as especificações fornecidas pelo professor durante as aulas.
Exemplo:

.......

Entregar um programa, escrito em linguagem Java, que simule a movimentação do robô dentro desta pista. Os comandos serão dados pelo usuário em pares: COMANDO ("FRENTE", "TRÁS", "ESQUERDA", "DIREITA") e DISTÂNCIA (10, 5, 3, 2, etc.). Além disto, o programa deverá calcular qual deve ser a potência da bateria do robô para que o percurso possa ser completado.?

Serão válidos os ENTREGAVÉIS cuja pista possa ser concluída em até 7 pares de comandos e que os simuladores sejam capazes de verificar comandos VÁLIDOS ou INVÁLIDOS.?

ENTREGÁVEL: Pista e programa que (1) possa atingir o objetivo (completar o percurso) em até 7 pares de comandos e que (2) seja capaz de verificar comandos VÁLIDOS ou INVÁLIDOS.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sprint 2:
especificações fornecidas pelo professor durante as aulas.
Exemplo:

.......

Entregar um programa, escrito em linguagem Java, que simule a movimentação do robô dentro desta pista. Os comandos serão dados pelo usuário em pares: COMANDO ("FRENTE", "TRÁS", "ESQUERDA", "DIREITA") e DISTÂNCIA (10, 5, 3, 2, etc.).

ENTREGÁVEL: Pista e programa que (1) possa atingir o objetivo (completar o percurso) em qualquer número de comandos, controlando a potência da bateria e que (2) seja capaz de verificar comandos VÁLIDOS ou INVÁLIDOS

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sprint 3: 
Para a Sprint 3, desenvolva um programa em Linguagem Java para realizar o ranking das equipes participantes da RoboCup. O programa deverá atender aos seguintes requisitos:

1. O programa deverá solicitar a quantidade de equipes participantes da competição e deverá armazenar o número de cada equipe (de 11 a 99, fazendo a consistência deste número).

2. O programa deverá solicitar a quantidade de combates realizada pelas equipes. Na sequência, para cada equipe, deverá ser armazenado V (Vitória), E (Empate) ou D (Derrota) para cada combate realizado pela equipe.

3. O programa também deverá solicitar a nota, de 0 e 10, que cada equipe teve para o design do robô.

4. Após a entrada de todos os dados, o programa deverá gerar uma lista de classificação ordenada pela pontuação. Para a classificação das equipes deve-se considerar que cada vitória equivale a 5 pontos, cada empate equivale a 3 pontos e cada derrota equivale a 0 pontos.

Observação: Caso haja empates entre as equipes, será utilizada a nota de design para definir o desempate, ou seja, a equipe com a maior nota de design terá vantagem na classificação (apenas se houver empates).

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sprint 4:
A Sprint 4 será uma remodelagem da Sprint 3. Elabore um programa em Linguagem Java que leia e armazene o número das equipes participantes da RoboCup. Em seguida, o programa deverá:


1. Gerar os combates "todos contra todos", por exemplo, equipes A, B e C; A x B / A x C / B x C.  

2. O programa deverá gerar um valor aleatório (entre 1 e 10) para cada robô durante o combate. O robô que tiver a maior pontuação será o vencedor do combate. Se os valores forem iguais, haverá empate e a nota de design do robô deverá ser utilizada para determinar o vencedor. Por exemplo, para o combate entre a equipe A e a equipe B, o número para a equipe A foi 9 e para a equipe B foi 7, portanto, a equipe vencedora é a equipe A.

3. O programa deverá determinar as 3 melhores equipes que deverão disputar a fase final, ou seja, deverão competir entre si (deverá acontecer a mesma lógica do item 2). Para a fase final a pontuação é diferente: 2 pontos para vitória e 1 ponto para empate (novamente, em caso de empate, a nota de design decide).


O programa em Linguagem Java deverá:

Ler e armazenar o número de todas as equipes.

Informar no vídeo o valor gerado para cada equipe em cada confronto.

Informar no vídeo quais as 3 melhores equipes.

Informar no vídeo o valor gerado para as 3 melhores equipes em cada confronto.

Informar o nome da equipe vencedora.
